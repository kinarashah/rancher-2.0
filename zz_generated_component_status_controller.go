package client

import (
	"context"

	"github.com/rancher/norman/clientbase"
	"github.com/rancher/norman/controller"
	"k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

var (
	CSGroupVersionKind = schema.GroupVersionKind{
		Version: "v1",
		Group:   "",
		Kind:    "ComponentStatus",
	}
	CSResource = metav1.APIResource{
		Name:         "componentstatuses",
		SingularName: "componentstatus",
		Namespaced:   false,
		Kind:         CSGroupVersionKind.Kind,
	}
)

type ComponentStatusList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []v1.ComponentStatus
}

type ComponentStatusHandlerFunc func(key string, obj *v1.ComponentStatus) error

type ComponentStatusController interface {
	Informer() cache.SharedIndexInformer
	AddHandler(handler ComponentStatusHandlerFunc)
	Enqueue(namespace, name string)
	Start(threadiness int, ctx context.Context) error
}

type ComponentStatusInterface interface {
	Create(*v1.ComponentStatus) (*v1.ComponentStatus, error)
	Get(name string, opts metav1.GetOptions) (*v1.ComponentStatus, error)
	Update(*v1.ComponentStatus) (*v1.ComponentStatus, error)
	Delete(name string, options *metav1.DeleteOptions) error
	List(opts metav1.ListOptions) (*ComponentStatusList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	DeleteCollection(deleteOpts *metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Controller() ComponentStatusController
}

type componentstatusController struct {
	controller.GenericController
}

func (c *componentstatusController) AddHandler(handler ComponentStatusHandlerFunc) {
	c.GenericController.AddHandler(func(key string) error {
		obj, exists, err := c.Informer().GetStore().GetByKey(key)
		if err != nil {
			return err
		}
		if !exists {
			return handler(key, nil)
		}
		return handler(key, obj.(*v1.ComponentStatus))
	})
}

type componentstatusFactory struct {
}

func (c componentstatusFactory) Object() runtime.Object {
	return &v1.ComponentStatus{}
}

func (c componentstatusFactory) List() runtime.Object {
	return &ComponentStatusList{}
}

type componentstatusClient struct {
	client       *Client
	ns           string
	objectClient *clientbase.ObjectClient
	controller   ComponentStatusController
}

func (s *componentstatusClient) Controller() ComponentStatusController {
	s.client.Lock()
	defer s.client.Unlock()

	c, ok := s.client.componentstatusControllers[s.ns]
	if ok {
		return c
	}

	genericController := controller.NewGenericController(CSGroupVersionKind.Kind+"Controller",
		s.objectClient)

	c = &componentstatusController{
		GenericController: genericController,
	}
	// logrus.Infof("Printing the namespace for controller %s", s.ns)
	s.client.componentstatusControllers[s.ns] = c

	return c
}

func (s *componentstatusClient) Create(o *v1.ComponentStatus) (*v1.ComponentStatus, error) {
	obj, err := s.objectClient.Create(o)
	return obj.(*v1.ComponentStatus), err
}

func (s *componentstatusClient) Get(name string, opts metav1.GetOptions) (*v1.ComponentStatus, error) {
	obj, err := s.objectClient.Get(name, opts)
	return obj.(*v1.ComponentStatus), err
}

func (s *componentstatusClient) Update(o *v1.ComponentStatus) (*v1.ComponentStatus, error) {
	obj, err := s.objectClient.Update(o.Name, o)
	return obj.(*v1.ComponentStatus), err
}

func (s *componentstatusClient) Delete(name string, options *metav1.DeleteOptions) error {
	return s.objectClient.Delete(name, options)
}

func (s *componentstatusClient) List(opts metav1.ListOptions) (*ComponentStatusList, error) {
	obj, err := s.objectClient.List(opts)
	return obj.(*ComponentStatusList), err
}

func (s *componentstatusClient) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return s.objectClient.Watch(opts)
}

func (s *componentstatusClient) DeleteCollection(deleteOpts *metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	return s.objectClient.DeleteCollection(deleteOpts, listOpts)
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ComponentStatusList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterList.
func (in *ComponentStatusList) DeepCopy() *ComponentStatusList {
	if in == nil {
		return nil
	}
	out := new(ComponentStatusList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentStatusList) DeepCopyInto(out *ComponentStatusList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1.ComponentStatus, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}
